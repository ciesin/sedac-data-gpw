library(ggplot2)
library(grid)
rootFolder <- "//Dataserver1/Sedac/COVID/match_demographics_to_johns_hopkins/"
dataFolder <- paste0(rootFolder, "boundaries_final_tables/")
outFolder <- paste0(rootFolder, "graphs/age_distributions/")
outCSVfolder <- paste0(rootFolder, "csvs/age_distributions/")
highestCategory <- read.csv(paste0(rootFolder, "scripts/highest_age_groups.csv"),
stringsAsFactors = FALSE)
#important plot things
ann <- "Center for International Earth Science Information Network - CIESIN - Columbia University. 2018. Gridded \nPopulation of the World, Version 4 (GPWv4): Basic Demographic Characteristics, Revision 11. Palisades, NY: \nNASA Socioeconomic Data and Applications Center (SEDAC). https://doi.org/10.7927/H46M34XX."
myColor <- RColorBrewer::brewer.pal(5, "Set3")[5]
abs_comma <- function (x, ...) {
format(abs(x), ..., big.mark = ",", scientific = FALSE, trim = TRUE)
}
#Update path to this csv
csv <- paste0(dataFolder,'boundaries_update_07_2020.csv')
inCSV <- read.csv(csv, stringsAsFactors = FALSE)
inCSV$Key <- inCSV$Combined_Key_GH
cols <- colnames(inCSV)
cols <- cols[grepl("E_A0", cols)]
ageData <- inCSV[,c("Key","ISOALPHA",cols)]
keyList <- unique(ageData$Key)
#keyName <- keyList[125]
for (keyName in keyList){
# Get important info
ageDF <- ageData[ageData$Key == keyName, ]
iso <- tolower(ageDF$ISOALPHA)
highestAge <- highestCategory$Highest[highestCategory$ISO == iso]
if (length(highestAge) > 0){
#Grab only Male/Female data
cols <- colnames(ageDF)
cols <- cols[grepl("E_A0",cols) & grepl("BT",cols) &
!grepl("000_014", cols) & !grepl("015_064", cols)]
ageDF <- ageDF[,cols]
colnames(ageDF) <- substr(cols,3,11)
#Reshape and clean up data frame
ageDF <- as.data.frame(t(ageDF))
colnames(ageDF) <- "Population"
ageDF$Age <- substr(row.names(ageDF),2,8)
ageDF$AgeDisplay <- paste(as.numeric(substr(ageDF$Age,1,3)), "to",
as.numeric(substr(ageDF$Age,5,7)))
#Pull out plus category we want
agePlus <- ageDF[grepl("NA",ageDF$AgeDisplay) &
substr(ageDF$AgeDisplay,1,2) == substr(highestAge,1,2), ]
agePlus$AgeDisplay <- paste0(substr(agePlus$AgeDisplay, 1, 3),"plus")
ageDF <- ageDF[as.numeric(substr(ageDF$Age,2,3)) < as.numeric(substr(highestAge,1,2)) &
!grepl("NA",ageDF$AgeDisplay),]
ageDF <- rbind(ageDF,agePlus)
ageDF$AgeNumeric <- as.numeric(substr(ageDF$Age, 1, 3))
ageDF$Area <- keyName
ageDF <- ageDF[,c("Area","AgeDisplay","AgeNumeric","Population")]
write.csv(ageDF, paste0(outCSVfolder,gsub("[*]","-",gsub(" ","_",keyName)),"_age_distribution.csv"), row.names=FALSE)
#Plot age pyramid
agePlot <- ggplot(ageDF, aes(x=AgeNumeric, y=Population)) +
geom_bar(stat = "identity", show.legend = FALSE, fill=myColor) +
scale_y_continuous(limits=c(0,max(ageDF$Population)*1.15),
labels=abs_comma) +
scale_x_continuous(breaks=ageDF$AgeNumeric, labels=ageDF$AgeDisplay) +
coord_flip(clip = "off") +
geom_text(aes(label=scales::comma(round(Population,0),accuracy=1)),
hjust=-0.1, vjust=0.5) +
labs(title = keyName, x=NULL, y=NULL,
subtitle = "Population Distribution",
caption = ann) +
theme_minimal() +
theme(plot.margin = unit(c(0.2,0.2,0.2,0.2), "in"),
plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
plot.caption = element_text(hjust=0.5, size=7),
panel.grid.major.y = element_blank())
ggsave(paste0(outFolder,gsub("[*]","-",gsub(" ","_",keyName)),"_age_distribution.png"),
plot=agePlot, width=7, height=7, units="in", dpi=300)
}
}
library(ggplot2)
library(grid)
rootFolder <- "//Dataserver1/Sedac/COVID/match_demographics_to_johns_hopkins/"
dataFolder <- paste0(rootFolder, "boundaries_final_tables/")
outFolder <- paste0(rootFolder, "graphs/age_pyramids/")
outCSVfolder <- paste0(rootFolder, "csvs/age_pyramids/")
highestCategory <- read.csv(paste0(rootFolder, "scripts/highest_age_groups.csv"),
stringsAsFactors = FALSE)
#important plot things
ann <- "Center for International Earth Science Information Network - CIESIN - Columbia University. 2018. Gridded \nPopulation of the World, Version 4 (GPWv4): Basic Demographic Characteristics, Revision 11. Palisades, NY: \nNASA Socioeconomic Data and Applications Center (SEDAC). https://doi.org/10.7927/H46M34XX."
abs_comma <- function (x, ...) {
format(abs(x), ..., big.mark = ",", scientific = FALSE, trim = TRUE)
}
#Update path to this csv
csv <- paste0(dataFolder,'boundaries_update_07_2020.csv')
inCSV <- read.csv(csv, stringsAsFactors = FALSE)
inCSV$Key <- inCSV$Combined_Key_GH
cols <- colnames(inCSV)
cols <- cols[grepl("E_A0", cols)]
ageData <- inCSV[,c("Key","ISOALPHA",cols)]
keyList <- unique(ageData$Key)
#keyName <- keyList[125]
for (keyName in keyList){
# Get important info
ageDF <- ageData[ageData$Key == keyName, ]
iso <- tolower(ageDF$ISOALPHA)
highestAge <- highestCategory$Highest[highestCategory$ISO == iso]
if (length(highestAge) > 0){
#Grab only Male/Female data
cols <- colnames(ageDF)
cols <- cols[grepl("E_A0",cols) & !grepl("BT",cols)]
ageDF <- ageDF[,cols]
colnames(ageDF) <- substr(cols,3,11)
#Reshape and clean up data frame
ageDF <- as.data.frame(t(ageDF))
colnames(ageDF) <- "Population"
ageDF$Age <- substr(row.names(ageDF),2,8)
ageDF$Sex <- substr(row.names(ageDF),9,9)
ageDF$AgeDisplay <- paste(as.numeric(substr(ageDF$Age,1,3)), "to",
as.numeric(substr(ageDF$Age,5,7)))
#Pull out plus category we want
agePlus <- ageDF[grepl("NA",ageDF$AgeDisplay) &
substr(ageDF$AgeDisplay,1,2) == substr(highestAge,1,2), ]
agePlus$AgeDisplay <- paste0(substr(agePlus$AgeDisplay, 1, 3),"plus")
ageDF <- ageDF[as.numeric(substr(ageDF$Age,2,3)) < as.numeric(substr(highestAge,1,2)) &
!grepl("NA",ageDF$AgeDisplay),]
ageDF <- rbind(ageDF,agePlus)
ageDF$AgeNumeric <- as.numeric(substr(ageDF$Age, 1, 3))
ageDF$PlotPopulation <- ageDF$Population
ageDF$PlotPopulation[ageDF$Sex == "M"] <- -1*ageDF$Population[ageDF$Sex == "M"]
ageDF$Area <- keyName
ageDF <- ageDF[,c("Area","AgeDisplay","AgeNumeric","Sex","Population","PlotPopulation")]
ageDF <- ageDF[order(ageDF$Sex, ageDF$AgeNumeric),]
write.csv(ageDF, paste0(outCSVfolder,gsub("[*]","-",gsub(" ","_",keyName)),"_age_pyramid.csv"), row.names=FALSE)
#Plot age pyramid
pyramidPlot <- ggplot(ageDF, aes(x=AgeNumeric, y=PlotPopulation, fill=Sex)) +
geom_bar(stat = "identity", show.legend = FALSE) +
scale_y_continuous(limits=c(-max(abs(ageDF$PlotPopulation))*1.3,max(abs(ageDF$PlotPopulation))*1.3),
labels=abs_comma) +
scale_x_continuous(breaks=ageDF$AgeNumeric[ageDF$Sex=="M"],
labels=ageDF$AgeDisplay[ageDF$Sex=="M"],
sec.axis = dup_axis()) +
coord_flip(clip = "off") +
scale_fill_brewer(palette="Set2") +
geom_text(aes(label=scales::comma(round(abs(PlotPopulation),0),accuracy=1)),
hjust=ifelse(ageDF$Sex=="M",1.1,-0.1)) +
labs(title = keyName, x=NULL, y=NULL,
subtitle = "Male                                                               Female",
caption = ann) +
theme_minimal() +
theme(plot.margin = unit(c(0,0.2,0.2,0.2), "in"),
plot.title = element_text(hjust=0.5, vjust=-5),
plot.subtitle = element_text(hjust=0.5, vjust=-10),
plot.caption = element_text(hjust=0.5, size=7),
panel.grid.major.y = element_blank())
ggsave(paste0(outFolder,gsub("[*]","-",gsub(" ","_",keyName)),"_age_pyramid.png"),
plot=pyramidPlot, width=7, height=7, units="in", dpi=300)
}
}
library(ggplot2)
library(grid)
library(gridExtra)
library(reshape2)
library(cowplot)
rootFolder <- "//Dataserver1/Sedac/COVID/match_demographics_to_johns_hopkins/"
dataFolder <- paste0(rootFolder, "boundaries_final_tables/")
outFolder <- paste0(rootFolder, "graphs/ghssmod_densities/")
outCSVfolder <- paste0(rootFolder, "csvs/ghssmod_densities/")
#important plot things
ann <- "The data in this graph are provided free-of-charge Â© European Union, 2019. Reuse is authorised, provided the source is acknowledged. Pesaresi, \nMartino; Florczyk, Aneta; Schiavina, Marcello; Melchiorri, Michele; Maffenini, Luca (2019): GHS settlement grid, updated and refined REGIO model \n2014 in application to GHS-BUILT R2018A and GHS-POP R2019A, multitemporal (1975-1990-2000-2015), R2019A. European Commission, Joint Research \nCentre (JRC) DOI: 10.2905/42E8BE89-54FF-464E-BE7B-BF9E64DA5218 PID: http://data.europa.eu/89h/42e8be89-54ff-464e-be7b-bf9e64da5218"
myColors <- c(RColorBrewer::brewer.pal(8, "YlOrBr")[8:2],
RColorBrewer::brewer.pal(5, "Set3")[5])
abs_comma <- function (x, ...) {
format(abs(x), ..., big.mark = ",", scientific = FALSE, trim = TRUE)}
#Update path to this csv
csv <- paste0(dataFolder,'boundaries_update_07_2020.csv')
inCSV <- read.csv(csv, stringsAsFactors = FALSE)
inCSV$Key <- inCSV$Combined_Key_GH
cols <- colnames(inCSV)
cols <- cols[grepl("GHSL", cols)]
cols <- cols[order(cols)]
ghslData <- inCSV[,c("Key",cols)]
#Reshape and add columns
ghslData <- unique(ghslData)
ghslLong <- melt(ghslData, id.vars="Key", measure.vars=cols[-1], value.name="Value")
ghslLong$Class <- sapply(strsplit(as.character(ghslLong$variable),'_2015_'), "[", 1)
ghslLong$Type <- sapply(strsplit(as.character(ghslLong$variable),'_2015_'), "[", 2)
ghslLong$Class <- factor(ghslLong$Class,
levels=c("GHSL_URBANCENTRE", "GHSL_DENSEURBANCLUSTER",
"GHSL_SEMIDENSEURBANCLUSTER", "GHSL_SUBURBAN",
"GHSL_RURALCLUSTER", "GHSL_LOWDENSITYRURAL",
"GHSL_VERYLOWDENSITYRURAL", "GHSL_WATER"),
labels=c("Urban Center", "Dense Urban Area",
"Semi-dense Urban Area", "Suburban or Peri-Urban",
"Rural", "Low Density Rural",
"Very Low Density Rural", "Water"))
ghslLong$Type <- factor(ghslLong$Type,
levels=c("POPULATION", "LANDAREA", "DENSITY"),
labels=c("Population", "Land Area", "Population Density"))
#Loop through keys
keyList <- unique(ghslLong$Key)
for (keyName in keyList){
outFile <- paste0(outFolder,gsub("[*]","-",gsub(" ","_",keyName)),"_ghssmod_density.png")
if (!file.exists(outFile)){
# Get important info
ghslDF <- ghslLong[ghslLong$Key == keyName, ]
ghslDF$Area <- keyName
ghslDF <- ghslDF[,c("Area","Type","Class","Value")]
write.csv(ghslDF, paste0(outCSVfolder,gsub("[*]","-",gsub(" ","_",keyName)),"_ghssmod_density.csv"), row.names = FALSE)
p1 <- ggplot(ghslDF[ghslDF$Type=='Population',], aes(x=Class, y=Value, fill=Class)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=myColors, breaks=levels(ghslDF$Class)) +
scale_y_continuous(labels=abs_comma) +
labs(title = "Population", x=NULL, y="Persons") +
guides(fill=guide_legend(nrow=2)) +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5),
legend.title=element_blank(),
axis.text.x=element_blank())
p2 <- ggplot(ghslDF[ghslDF$Type=='Land Area',], aes(x=Class, y=Value, fill=Class)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=myColors, breaks=levels(ghslDF$Class)) +
scale_y_continuous(labels=abs_comma) +
labs(title = "Land Area", x=NULL, y=expression(~km^2)) +
guides(fill=guide_legend(nrow=2)) +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5),
legend.title=element_blank(),
axis.text.x=element_blank())
p3 <- ggplot(ghslDF[ghslDF$Type=='Population Density',], aes(x=Class, y=Value, fill=Class)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=myColors, breaks=levels(ghslDF$Class)) +
scale_y_continuous(labels=abs_comma) +
labs(title = "Average Population Density", x=NULL, y=expression("Persons per"~km^2)) +
guides(fill=guide_legend(nrow=2)) +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5),
legend.title=element_blank(),
axis.text.x=element_blank())
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend<-g_legend(p1)
ghslPlot <- ggdraw(grid.arrange(textGrob(keyName, gp=gpar(fontsize=18,font=2)),
textGrob("2015 Data by Degree of Urbanization (SMOD) Class", gp=gpar(fontsize=16,font=3),y=unit(0.65,"npc")),
arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"), nrow=1),
mylegend,
textGrob(ann, gp=gpar(fontsize=7)),
nrow=5, heights=c(0.5,0.5,5,1,1))) +
theme(plot.margin=margin(0.1, 0.1, 0.1, 0.1, "cm"))
ggsave(outFile, plot=ghslPlot, width=10, height=6, units="in", dpi=300)
}
}
